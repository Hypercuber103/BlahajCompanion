require('dotenv').config();
const { Client, GatewayIntentBits, Partials, REST, Routes, SlashCommandBuilder, ActivityType, EmbedBuilder, PermissionsBitField } = require('discord.js');

const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildModeration
    ],
    partials: [Partials.Channel]
});

// Slash commands list
const slashCommands = [
    new SlashCommandBuilder().setName('help').setDescription('Shows all commands üìÉ'),
    new SlashCommandBuilder().setName('sharkfact').setDescription('Get a random shark or Bl√•haj fact ü¶à'),
    new SlashCommandBuilder().setName('hug').setDescription('Receive a warm Bl√•haj hug ü§ó'),
    new SlashCommandBuilder().setName('blahajdance').setDescription('Watch Bl√•haj show off dance moves! üï∫'),
    new SlashCommandBuilder().setName('joke').setDescription('Hear a shark-themed joke ü§£'),
    new SlashCommandBuilder().setName('pridelevel').setDescription('Check your pride level! üè≥Ô∏è‚Äçüåà'),
    new SlashCommandBuilder().setName('clear').setDescription('Deletes the last 10 messages (Admins only) üßπ')
        .setDefaultMemberPermissions(PermissionsBitField.Flags.ManageMessages)
].map(cmd => cmd.toJSON());

// Register slash commands
client.once('ready', async () => {
    console.log(`ü¶à Bl√•haj is online as ${client.user.tag}!`);
    
    updateStatus();
    setInterval(updateStatus, 60000);

    const rest = new REST({ version: '10' }).setToken(process.env.DISCORD_TOKEN);
    try {
        await rest.put(Routes.applicationCommands(client.user.id), { body: slashCommands });
        console.log('‚úÖ Successfully registered slash commands!');
    } catch (error) {
        console.error('‚ùå Error registering commands:', error);
    }
});

// !help command
client.on('messageCreate', async message => {
    if (message.author.bot) return;

    if (message.content === '!help') {
        await message.reply('üëã Hey! I use **slash commands** now! If you have the old version of the bot, use [this link!](https://discord.com/oauth2/authorize?client_id=1330213308753510470&permissions=277092886592&integration_type=0&scope=bot+applications.commands) Then after you added the bot to your server, type `/help` to see a list of available commands.');
    }
});

// Rotating Status Function
const statuses = [
    { name: 'the ocean üåä | /help', type: ActivityType.Watching },
    { name: 'shark documentaries ü¶àüì∫', type: ActivityType.Watching },
    { name: 'ocean waves üåäüé∂', type: ActivityType.Listening },
    { name: 'Shark Simulator 2024 üéÆ', type: ActivityType.Playing },
    { name: 'Bl√•haj Adventures! ü¶à‚ú®', type: ActivityType.Playing }
];

function updateStatus() {
    const randomStatus = statuses[Math.floor(Math.random() * statuses.length)];
    client.user.setPresence({ activities: [randomStatus], status: 'online' });
}

// Handle Slash Commands
client.on('interactionCreate', async interaction => {
    if (!interaction.isChatInputCommand()) return;

    try {
        const { commandName } = interaction;

        if (commandName === 'help') {
            const helpEmbed = new EmbedBuilder()
                .setColor('#1E90FF')
                .setTitle('ü¶à Bl√•haj Commands')
                .setDescription('Here are the commands you can use:')
                .addFields(
                    { name: '/sharkfact', value: 'ü¶à Get a random shark fact', inline: true },
                    { name: '/hug', value: 'ü§ó Receive a hug', inline: true },
                    { name: '/blahajdance', value: 'üï∫ Dance with Bl√•haj', inline: true },
                    { name: '/joke', value: 'ü§£ Hear a joke', inline: true },
                    { name: '/pridelevel', value: 'üè≥Ô∏è‚Äçüåà Check your pride level', inline: true },
                    { name: '/clear', value: 'üßπ Deletes last 10 messages (Admins only)', inline: true }
                )
                .setFooter({ text: 'Bl√•haj loves you! üíô' });

            await interaction.reply({ embeds: [helpEmbed] });
        } else if (commandName === 'sharkfact') {
            const facts = [
                'Sharks have been around for over 400 million years!',
                'Sharks can detect electrical fields in the water.',
                'Bl√•haj means "blue shark" in Swedish!',
                'Bl√•haj is a soft and cuddly IKEA shark!',
                'There are over 500 species of sharks!',
                'Sharks lose and regrow thousands of teeth in their lifetime!'
            ];
            await interaction.reply(facts[Math.floor(Math.random() * facts.length)]);
        } else if (commandName === 'hug') {
            await interaction.reply('Bl√•haj gives you a big hug! ü¶àüíô');
        } else if (commandName === 'blahajdance') {
            const dances = [
                'ü¶àüíÉ Bl√•haj twirls gracefully!',
                'ü¶àüï∫ Bl√•haj does a little shark shuffle!',
                'ü¶à‚ú® Bl√•haj performs the moonwalk (underwater edition)!',
                'ü¶àüé∂ Bl√•haj grooves to the rhythm of the ocean!',
                'ü¶àü§© Bl√•haj breaks into an epic dance routine!',
                'ü¶àüíÉüï∫ Bl√•haj joins in for a group dance party!'
            ];
            await interaction.reply(dances[Math.floor(Math.random() * dances.length)]);
        } else if (commandName === 'joke') {
            const jokes = [
                "Why don't sharks like fast food? Because they can't catch it! ü¶àüòÇ",
                "What‚Äôs a shark‚Äôs favorite sci-fi show? Shark Trek! üññü¶à",
                "How do sharks stay in shape? They swim-ercise! üèä‚Äç‚ôÇÔ∏èü¶à",
                "What do you call a shark who delivers toys at Christmas? Santa Jaws! üéÖü¶à",
                "Why was the shark good at math? It was great with angles! üìêü¶à",
                "What‚Äôs a Bl√•haj‚Äôs favorite hobby? Sofa surfing! üõãÔ∏èü¶à"
            ];
            await interaction.reply(jokes[Math.floor(Math.random() * jokes.length)]);
        } else if (commandName === 'pridelevel') {
            const prideScore = Math.floor(Math.random() * 101);
            await interaction.reply(`${interaction.user}, your Pride Level: **${prideScore}%** üè≥Ô∏è‚Äçüåà`);
        } else if (commandName === 'clear') {
            if (!interaction.member.permissions.has(PermissionsBitField.Flags.ManageMessages)) {
                return await interaction.reply({ content: '‚ùå You need **Manage Messages** permission to use this!', ephemeral: true });
            }

            const channel = interaction.channel;
            await channel.bulkDelete(10, true).catch(() => {});
            await interaction.reply({ content: 'üßπ Deleted the last 10 messages!', ephemeral: true });
        }
    } catch (error) {
        console.error('Command error:', error);
        await interaction.reply({ content: '‚ö†Ô∏è Oops! Something went wrong.', ephemeral: true });
    }
});

// Login to Discord
client.login(process.env.DISCORD_TOKEN);
